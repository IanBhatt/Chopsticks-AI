import random
import pickle


def setbrain():
    brain = input("Continue with previous ai brain(C), or start a new brain(N): ")
    brain = brain.upper()

    if brain == 'N':
        pickle.dump([], open("aiwins.dat", "wb"))
        pickle.dump([], open("personwins.dat", "wb"))
        pickle.dump([], open("aiwins2.dat", "wb"))
        pickle.dump([], open("personwins2.dat", "wb"))
    elif brain == 'C':
        pass

    else:
        print("Please type C or N")
        setbrain()


setbrain()

aiwins = pickle.load(open("aiwins.dat", "rb"))
humanwins = pickle.load(open("personwins.dat", "rb"))
print(aiwins)
print(humanwins)

aiwins2 = pickle.load(open("aiwins2.dat", "rb"))
humanwins2 = pickle.load(open("personwins2.dat", "rb"))

p2 = [1, 1]
p1 = [1, 1]
gameamount = 100


def board():
    print("_________________________")
    print(" Player 2 | " + str(p2[0]) + "  " + str(p2[1]) + " | L  R")
    print(" Player 1 | " + str(p1[0]) + "  " + str(p1[1]) + " | L  R")
    print("¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯")


def bumpcheck(x1, x2):
    if [x1, x2] == [0, 1]:
        return [1]
    if [x1, x2] == [0, 2]:
        return [1, 2]
    if [x1, x2] == [0, 3]:
        return [1, 2, 3]
    if [x1, x2] == [0, 4]:
        return [1, 2, 3, 4]
    if [x1, x2] == [1, 0]:
        return [0]
    if [x1, x2] == [2, 0]:
        return [1, 0]
    if [x1, x2] == [3, 0]:
        return [2, 1, 0]
    if [x1, x2] == [4, 0]:
        return [3, 2, 1, 0]
    if [x1, x2] == [1, 1]:
        return [0, 2]
    if [x1, x2] == [1, 2]:
        return [0, 2, 3]
    if [x1, x2] == [1, 3]:
        return [0, 2, 3, 4]
    if [x1, x2] == [1, 4]:
        return [2, 3, 4]
    if [x1, x2] == [2, 1]:
        return [0, 1, 3]
    if [x1, x2] == [2, 2]:
        return [0, 1, 3, 4]
    if [x1, x2] == [2, 3]:
        return [1, 3, 4]
    if [x1, x2] == [2, 4]:
        return [3, 4]
    if [x1, x2] == [3, 1]:
        return [0, 1, 2, 4]
    if [x1, x2] == [3, 2]:
        return [1, 2, 4]
    if [x1, x2] == [3, 3]:
        return [2, 4]
    if [x1, x2] == [3, 4]:
        return [4]
    if [x1, x2] == [4, 1]:
        return [1, 2, 3]
    if [x1, x2] == [4, 2]:
        return [2, 3]
    if [x1, x2] == [4, 3]:
        return [3]


def playermove(p1l, p1r, p2l, p2r):
    pm = input("Enter a move (a new left value to bump or LL, LR, RR, RL for attack): ")
    try:
        bump = int(pm)
        move = 'b'
    except:
        attack = pm
        attack = attack.upper()
        move = 'a'
    if move == 'a':
        if attack == "LL":
            if p1l == 0 or p2l == 0:
                print("Invalid Move")
                return playermove(p1l, p1r, p2l, p2r)

            return [p1l, p1r, ((p1l + p2l) % 5), p2r]
        elif attack == "LR":
            if p1l == 0 or p2r == 0:
                print("Invalid Move")
                return playermove(p1l, p1r, p2l, p2r)
            return [p1l, p1r, p2l, ((p1l + p2r) % 5)]
        elif attack == "RR":
            if p1r == 0 or p2r == 0:
                print("Invalid Move")
                return playermove(p1l, p1r, p2l, p2r)
            return [p1l, p1r, p2l, ((p1r + p2r) % 5)]
        elif attack == "RL":
            if p1r == 0 or p2l == 0:
                print("Invalid Move")
                return playermove(p1l, p1r, p2l, p2r)
            return [p1l, p1r, ((p1r + p2l) % 5), p2r]
        else:
            print("Invalid Move")
            return playermove(p1l, p1r, p2l, p2r)


    elif move == 'b':

        valid_bumps = bumpcheck(p1l, p1r)

        if (bump not in valid_bumps) or (p1l + p1r == 1) or (p1r == 0 and bump == 0) or (bump == p1r):

            print("Invalid Move")

            return playermove(p1l, p1r, p2l, p2r)

        else:

            return [bump, (p1r - (bump - p1l)), p2l, p2r]


def LL(x1, x2, y1, y2):
    if x1 != 0 and y1 != 0:
        x1 = (x1 + y1) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def LR(x1, x2, y1, y2):
    if x2 != 0 and y1 != 0:
        x2 = (x2 + y1) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def RR(x1, x2, y1, y2):
    if x2 != 0 and y2 != 0:
        x2 = (x2 + y2) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def RL(x1, x2, y1, y2):
    if x1 != 0 and y2 != 0:
        x1 = (x1 + y2) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def bump(x1, x2, y1, y2, ch):
    y2 = (y1 + y2 - ch) % 5
    y1 = ch % 5
    return x1, x2, y1, y2


def getmoves(x1, x2, y1, y2):
    moves = [LL(x1, x2, y1, y2), LR(x1, x2, y1, y2), RR(x1, x2, y1, y2), RL(x1, x2, y1, y2)]

    length = len(moves)
    i = 0
    while (i < length):
        if (moves[i] == '-'):
            moves.remove(moves[i])
            length = length - 1
            continue
        i = i + 1

    bumps = [0, 1, 2, 3, 4]
    bumpsuse = [0, 1, 2, 3, 4]
    bumpsuse.remove(y1)
    bumpsok = []
    true = 1
    story1 = y1
    story2 = y2
    while true == 1:

        if (y1 + y2) >= 5:
            bumpsok = bumpsuse[(bumps[((y1 + y2) % 5) + 1]):]
            for x in range(len(bumpsok)):
                if (y1 + y2) % 5 != 0:
                    bumpsuse.remove(x)
        for i in bumpsuse:
            if i > (y1 + y2):
                pass
            else:
                bumpsok += str(i)
        bumpsok = list(map(int, bumpsok))

        for i in bumpsok:
            if story1 == 0 and story2 == 1:
                if i == 1:
                    break
            if story1 == 1 and story2 == 0:
                if i == 0:
                    break

            if story1 == 0 and story2 == i:
                pass


            elif story2 == 0 and story2 == i:
                pass


            else:
                true = 2
        break

    seen = {}
    dupes = []
    for x in bumpsok:
        if x not in seen:
            seen[x] = 1
        else:
            if seen[x] == 1:
                dupes.append(x)
            seen[x] += 1
    if dupes:

        for c in range(len(dupes)):
            bump1 = bump(x1, x2, y1, y2, dupes[c])

            moves.append(bump1)

        moves = [elem for elem in moves if elem != "-"]
        moves = list(dict.fromkeys(moves))
        # moves = moves + moves + moves
        choices = []
        for i in moves:
            i = list(i)
            choices.append(i)

        if y1 == 1 and y2 == 0:
            choices.remove([1, 1, 0, 1])
        elif y1 == 0 and y2 == 1:
            choices.remove([1, 1, 1, 0])

        return choices
    else:
        for c in range(len(bumpsok)):
            bump2 = bump(x1, x2, y1, y2, bumpsok[c])

            moves.append(bump2)
            moves = [elem for elem in moves if elem != "-"]
            moves = list(dict.fromkeys(moves))

        # moves = moves + moves + moves
        choices = []
        for i in moves:
            i = list(i)
            choices.append(i)

        if y1 == 1 and y2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 1]:
                    choices.remove(i)
        elif y1 == 2 and y2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 2]:
                    choices.remove(i)
        elif y1 == 3 and y2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 3]:
                    choices.remove(i)
        elif y1 == 4 and y2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 4]:
                    choices.remove(i)

        elif y1 == 0 and y2 == 1:
            for i in choices:
                if [i[2], i[3]] == [1, 0]:
                    choices.remove(i)
        elif y1 == 0 and y2 == 2:
            for i in choices:
                if [i[2], i[3]] == [2, 0]:
                    choices.remove(i)
        elif y1 == 0 and y2 == 3:
            for i in choices:
                if [i[2], i[3]] == [3, 0]:
                    choices.remove(i)
        elif y1 == 0 and y2 == 4:
            for i in choices:
                if [i[2], i[3]] == [4, 0]:
                    choices.remove(i)
        return choices


def trainerLL(x1, x2, y1, y2):
    if x1 != 0 and y1 != 0:
        y1 = (x1 + y1) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def trainerLR(x1, x2, y1, y2):
    if x1 != 0 and y2 != 0:
        y2 = (x1 + y2) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def trainerRR(x1, x2, y1, y2):
    if x2 != 0 and y2 != 0:
        y2 = (x2 + y2) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def trainerRL(x1, x2, y1, y2):
    if x2 != 0 and y1 != 0:
        y1 = (x2 + y1) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def trainerbump(x1, x2, y1, y2, ch):
    x2 = (x1 + x2 - ch) % 5
    x1 = ch % 5
    return x1, x2, y1, y2


def gettrainermoves(x1, x2, y1, y2):
    moves = [trainerLL(x1, x2, y1, y2), trainerLR(x1, x2, y1, y2), trainerRR(x1, x2, y1, y2), trainerRL(x1, x2, y1, y2)]

    length = len(moves)
    i = 0
    while (i < length):
        if (moves[i] == '-'):
            moves.remove(moves[i])
            length = length - 1
            continue
        i = i + 1

    bumps = [0, 1, 2, 3, 4]
    bumpsuse = [0, 1, 2, 3, 4]
    bumpsuse.remove(x1)
    bumpsok = []
    true = 1
    story1 = x1
    story2 = x2
    while true == 1:

        if (x1 + x2) >= 5:
            bumpsok = bumpsuse[(bumps[((x1 + x2) % 5) + 1]):]
            for x in range(len(bumpsok)):
                if (x1 + x2) % 5 != 0:
                    bumpsuse.remove(x)
        for i in bumpsuse:
            if i > (x1 + x2):
                pass
            else:
                bumpsok += str(i)
        bumpsok = list(map(int, bumpsok))

        for i in bumpsok:
            if story1 == 0 and story2 == 1:
                if i == 1:
                    break
            if story1 == 1 and story2 == 0:
                if i == 0:
                    break

            if story1 == 0 and story2 == i:
                pass


            elif story2 == 0 and story2 == i:
                pass


            else:
                true = 2
        break

    seen = {}
    dupes = []
    for x in bumpsok:
        if x not in seen:
            seen[x] = 1
        else:
            if seen[x] == 1:
                dupes.append(x)
            seen[x] += 1
    if dupes:

        for c in range(len(dupes)):
            bump1 = bump(x1, x2, y1, y2, dupes[c])

            moves.append(bump1)

        moves = [elem for elem in moves if elem != "-"]
        moves = list(dict.fromkeys(moves))
        # moves = moves + moves + moves
        choices = []
        for i in moves:
            i = list(i)
            choices.append(i)
        if x1 == 1 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 1]:
                    choices.remove(i)
        elif x1 == 2 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 2]:
                    choices.remove(i)
        elif x1 == 3 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 3]:
                    choices.remove(i)
        elif x1 == 4 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 4]:
                    choices.remove(i)

        elif x1 == 0 and x2 == 1:
            for i in choices:
                if [i[2], i[3]] == [1, 0]:
                    choices.remove(i)
        elif x1 == 0 and x2 == 2:
            for i in choices:
                if [i[2], i[3]] == [2, 0]:
                    choices.remove(i)
        elif x1 == 0 and x2 == 3:
            for i in choices:
                if [i[2], i[3]] == [3, 0]:
                    choices.remove(i)
        elif x1 == 0 and x2 == 4:
            for i in choices:
                if [i[2], i[3]] == [4, 0]:
                    choices.remove(i)

        return choices
    else:
        for c in range(len(bumpsok)):
            bump2 = trainerbump(x1, x2, y1, y2, bumpsok[c])

            moves.append(bump2)
            moves = [elem for elem in moves if elem != "-"]
            moves = list(dict.fromkeys(moves))

        # moves = moves + moves + moves
        choices = []
        for i in moves:
            i = list(i)
            choices.append(i)

        if x1 == 1 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 1]:
                    choices.remove(i)
        elif x1 == 2 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 2]:
                    choices.remove(i)
        elif x1 == 3 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 3]:
                    choices.remove(i)
        elif x1 == 4 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 4]:
                    choices.remove(i)

        elif x1 == 0 and x2 == 1:
            for i in choices:
                if [i[2], i[3]] == [1, 0]:
                    choices.remove(i)
        elif x1 == 0 and x2 == 2:
            for i in choices:
                if [i[2], i[3]] == [2, 0]:
                    choices.remove(i)
        elif x1 == 0 and x2 == 3:
            for i in choices:
                if [i[2], i[3]] == [3, 0]:
                    choices.remove(i)
        elif x1 == 0 and x2 == 4:
            for i in choices:
                if [i[2], i[3]] == [4, 0]:
                    choices.remove(i)
        return choices


def reset():
    p1[0] = 1
    p1[1] = 1
    p2[0] = 1
    p2[1] = 1


def setboard(p2l, p2r, p1l, p1r):
    p2[0] = p1l
    p2[1] = p1r
    p1[0] = p2l
    p1[1] = p2r


def wincheck(p2l, p2r, p1l, p1r):
    if p2l + p2r == 0:
        return "ai"
    elif p1l + p1r == 0:
        return "human"


def aimove(p2l, p2r, p1l, p1r, humanwins, aiwins):
    aichoice = getmoves(p2l, p2r, p1l, p1r)

    choices = []
    for i in aichoice:
        i = list(i)
        choices.append(i)

    for i in aiwins:
        for x in i:
            if x[0] == [p1[0], p1[1], p2[0], p2[1]]:
                # print("cambe mod: " + str(x))

                choices.append(x[1])

    for a in humanwins:
        for b in a:
            if b[0] == [p1[0], p1[1], p2[0], p2[1]]:

                if len(choices) > 1:
                    try:
                        choices.remove(b[1])
                    except:
                        pass

    # print(choices)

    choicenumber = random.randint(0, (len(choices) - 1))
    choice = choices[choicenumber]

    return choice


def trainermove(p2l, p2r, p1l, p1r):
    trainerchoice = gettrainermoves(p2l, p2r, p1l, p1r)
    # print(trainerchoice)

    choicenumber = random.randint(0, (len(trainerchoice) - 1))
    choice = trainerchoice[choicenumber]
    return choice


def smarttrainermove(p2l, p2r, p1l, p1r, humanwins2, aiwins2):
    #print("humanwins2: " + str(humanwins2))
    #print("aiwins2: " + str(aiwins2))
    aichoice = gettrainermoves(p2l, p2r, p1l, p1r)

    choices = []
    for i in aichoice:
        i = list(i)
        choices.append(i)
    #print("trainer's choices: " + str(choices))

    for i in humanwins2:
        for x in i:
            if x[0] == [p1[0], p1[1], p2[0], p2[1]]:
                #print("cambe mod: " + str(x))

                choices.append(x[1])
    #print(choices)
    for a in aiwins2:
        for b in a:
            if b[0] == [p1[0], p1[1], p2[0], p2[1]]:
                #print("dont make move: " + str(b))

                if len(choices) > 1:
                    try:
                        choices.remove(b[1])
                    except:
                        pass
    #print(choices)
    choicenumber = random.randint(0, (len(choices) - 1))
    choice = choices[choicenumber]

    return choice


def trainerloop(humanwins, aiwins, humanwincount, aiwincount, gamenumber):
    gameamt = 500
    if gamenumber < gameamt:
        count = 0
        reset()
        moves = []
        groupedmoves = []
        gamenumber += 1

        while True:

            boardstate = [p1[0], p1[1], p2[0], p2[1]]

            if count > 0:
                moves.append(boardstate)

            # --------------------------------------------------------------------------------
            win = wincheck(p1[0], p1[1], p2[0], p2[1])
            if win == "ai":
                aiwincount += 1

                grouped = list(zip(*[iter(moves)] * 2))

                for i in grouped:
                    i = list(i)
                    groupedmoves.append(i)

                aiwins.append(groupedmoves)
                pickle.dump(aiwins, open("aiwins.dat", "wb"))
                print("Game " + str(gamenumber) + ": The AI won " + str(aiwincount / gamenumber) + "% of the games.")

                trainerloop(humanwins, aiwins, humanwincount, aiwincount, gamenumber)
            elif win == "human":
                humanwincount += 1
                grouped = list(zip(*[iter(moves)] * 2))

                for i in grouped:
                    i = list(i)
                    groupedmoves.append(i)

                humanwins.append(groupedmoves)
                pickle.dump(humanwins, open("personwins.dat", "wb"))
                print("Game " + str(gamenumber) + ": The AI won " + str(aiwincount / gamenumber) + "% of the games.")

                trainerloop(humanwins, aiwins, humanwincount, aiwincount, gamenumber)
            # --------------------------------------------------------------------------------

            trainerchoice = list(trainermove(p1[0], p1[1], p2[0], p2[1]))
            setboard(trainerchoice[0], trainerchoice[1], trainerchoice[2], trainerchoice[3])
            boardstate = [p1[0], p1[1], p2[0], p2[1]]

            moves.append(boardstate)

            # --------------------------------------------------------------------------------
            win = wincheck(p1[0], p1[1], p2[0], p2[1])
            if win == "ai":
                aiwincount += 1
                grouped = list(zip(*[iter(moves)] * 2))

                for i in grouped:
                    i = list(i)
                    groupedmoves.append(i)

                aiwins.append(groupedmovess)
                pickle.dump(aiwins, open("aiwins.dat", "wb"))
                print("Game " + str(gamenumber) + ": The AI won " + str(aiwincount / gamenumber) + "% of the games.")

                trainerloop(humanwins, aiwins, humanwincount, aiwincount, gamenumber)
            elif win == "human":
                humanwincount += 1
                grouped = list(zip(*[iter(moves)] * 2))

                for i in grouped:
                    i = list(i)
                    groupedmoves.append(i)

                humanwins.append(groupedmoves)
                pickle.dump(humanwins, open("personwins.dat", "wb"))
                print("The AI won " + str(aiwincount / gamenumber) + "% of the games.")

                trainerloop(humanwins, aiwins, humanwincount, aiwincount, gamenumber)
            # --------------------------------------------------------------------------------

            aichoice = ((aimove(p1[0], p1[1], p2[0], p2[1], humanwins, aiwins)))
            setboard(aichoice[0], aichoice[1], aichoice[2], aichoice[3])

            count += 1
    else:
        print("done training")
        print("The AI won " + str(aiwincount) + " times.")
        print("The Trainer won " + str(humanwincount) + " times.")
        print("The AI won " + str(aiwincount / gameamt) + "% of the games.")


def smarttrainerloop(humanwins, aiwins, humanwincount, aiwincount, gamenumber):
    gameamt = 300
    if gamenumber < gameamt:
        count = 0
        reset()
        moves = []
        groupedmoves = []
        gamenumber += 1

        while True:

            boardstate = [p1[0], p1[1], p2[0], p2[1]]
            #if count > 0:
                #print("\nThe AI's Move is Below")
            #board()


            moves.append(boardstate)

            # --------------------------------------------------------------------------------
            win = wincheck(p1[0], p1[1], p2[0], p2[1])
            if win == "ai":
                aiwincount += 1

                grouped = list(zip(*[iter(moves)] * 2))

                for i in grouped:
                    i = list(i)
                    groupedmoves.append(i)
                #print("The ai won.")

                aiwins.append(groupedmoves)
                pickle.dump(aiwins, open("aiwins2.dat", "wb"))
                print("Game " + str(gamenumber) + ": The AI won " + str(aiwincount / gamenumber) + "% of the games.")

                smarttrainerloop(humanwins, aiwins, humanwincount, aiwincount, gamenumber)
            elif win == "human":
                humanwincount += 1
                #print("moves: " + str(moves))
                grouped = list(zip(*[iter(moves)] * 2))


                for i in grouped:
                    i = list(i)
                    groupedmoves.append(i)
                #print("groupedmoves: " + str(groupedmoves))
                #print("The smart trainer won!")

                humanwins.append(groupedmoves)
                pickle.dump(humanwins, open("personwins2.dat", "wb"))
                print("Game " + str(gamenumber) + ": The AI won " + str(aiwincount / gamenumber) + "% of the games.")

                smarttrainerloop(humanwins, aiwins, humanwincount, aiwincount, gamenumber)
            # --------------------------------------------------------------------------------

            smarttrainerchoice = list(smarttrainermove(p1[0], p1[1], p2[0], p2[1], humanwins2, aiwins2))
            setboard(smarttrainerchoice[0], smarttrainerchoice[1], smarttrainerchoice[2], smarttrainerchoice[3])
            boardstate = [p1[0], p1[1], p2[0], p2[1]]
            #print("\nThe smart trainer's move is Below")
            #board()

            moves.append(boardstate)

            # --------------------------------------------------------------------------------
            win = wincheck(p1[0], p1[1], p2[0], p2[1])
            if win == "ai":
                aiwincount += 1
                grouped = list(zip(*[iter(moves)] * 2))

                for i in grouped:
                    i = list(i)
                    groupedmoves.append(i)
                #print("The ai won.")

                aiwins.append(groupedmoves)
                pickle.dump(aiwins, open("aiwins2.dat", "wb"))
                print("Game " + str(gamenumber) + ": The AI won " + str(aiwincount / gamenumber) + "% of the games.")

                smarttrainerloop(humanwins, aiwins, humanwincount, aiwincount, gamenumber)
            elif win == "human":
                humanwincount += 1
                #print("moves: " + str(moves))
                grouped = list(zip(*[iter(moves)] * 2))

                for i in grouped:
                    i = list(i)
                    groupedmoves.append(i)
                #print("groupedmoves: " + str(groupedmoves))
                #print("The smart trainer won!")

                humanwins.append(groupedmoves)
                pickle.dump(humanwins, open("personwins2.dat", "wb"))
                print("The AI won " + str(aiwincount / gamenumber) + "% of the games.")

                smarttrainerloop(humanwins, aiwins, humanwincount, aiwincount, gamenumber)
            # --------------------------------------------------------------------------------

            aichoice = ((aimove(p1[0], p1[1], p2[0], p2[1], humanwins, aiwins)))
            setboard(aichoice[0], aichoice[1], aichoice[2], aichoice[3])

            count += 1
    else:
        print("done training")
        print("The AI won " + str(aiwincount) + " times.")
        print("The Trainer won " + str(humanwincount) + " times.")
        print("The AI won " + str(aiwincount / gameamt) + "% of the games.")


def mainloop(humanwins, aiwins):
    count = 0
    reset()
    moves = []
    groupedmoves = []

    while True:

        boardstate = [p1[0], p1[1], p2[0], p2[1]]
        if count > 0:
            print("\nThe AI's Move is Below")
        board()
        if count > 0:
            moves.append(boardstate)
            print("Moves: " + str(moves))
            print("Aiwins: " + str(aiwins))
            print("Humanwins: " + str(humanwins))

        # --------------------------------------------------------------------------------
        win = wincheck(p1[0], p1[1], p2[0], p2[1])
        if win == "ai":

            grouped = list(zip(*[iter(moves)] * 2))

            for i in grouped:
                i = list(i)
                groupedmoves.append(i)

            print("The ai won.")
            aiwins.append(groupedmoves)
            pickle.dump(aiwins, open("aiwins.dat", "wb"))

            print(groupedmoves)

            mainloop(humanwins, aiwins)
        elif win == "human":
            grouped = list(zip(*[iter(moves)] * 2))

            for i in grouped:
                i = list(i)
                groupedmoves.append(i)

            print("You won!")
            humanwins.append(groupedmoves)
            pickle.dump(humanwins, open("personwins.dat", "wb"))
            print(groupedmoves)

            mainloop(humanwins, aiwins)
        # --------------------------------------------------------------------------------

        playerchoice = list(playermove(p1[0], p1[1], p2[0], p2[1]))
        setboard(playerchoice[0], playerchoice[1], playerchoice[2], playerchoice[3])
        boardstate = [p1[0], p1[1], p2[0], p2[1]]
        print("\nYour Move is Below")
        board()
        moves.append(boardstate)
        print("Moves: " + str(moves))

        # --------------------------------------------------------------------------------
        win = wincheck(p1[0], p1[1], p2[0], p2[1])
        if win == "ai":
            grouped = list(zip(*[iter(moves)] * 2))

            for i in grouped:
                i = list(i)
                groupedmoves.append(i)

            print("The ai won.")
            aiwins.append(groupedmovess)
            pickle.dump(aiwins, open("aiwins.dat", "wb"))
            print(groupedmoves)

            mainloop(humanwins, aiwins)
        elif win == "human":
            grouped = list(zip(*[iter(moves)] * 2))

            for i in grouped:
                i = list(i)
                groupedmoves.append(i)

            print("You won!")
            humanwins.append(groupedmoves)
            pickle.dump(humanwins, open("personwins.dat", "wb"))
            print(groupedmoves)
            mainloop(humanwins, aiwins)
        # --------------------------------------------------------------------------------

        aichoice = ((aimove(p1[0], p1[1], p2[0], p2[1], humanwins, aiwins)))
        setboard(aichoice[0], aichoice[1], aichoice[2], aichoice[3])

        count += 1


# mainloop(humanwins,aiwins)
# trainerloop(humanwins, aiwins, 0, 0, 0)
# smarttrainerloop(humanwins2, aiwins2, 0, 0, 0)
